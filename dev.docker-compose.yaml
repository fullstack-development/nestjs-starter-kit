version: '3.8'

services:
  postgres:
    container_name: "${CONTAINER_NAME_DB:-dev_stk_db}"
    image: postgres
    environment:
      POSTGRES_USER: ${DB_USER:-admin}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-1234}
      POSTGRES_DB: ${DB_NAME:-stkdb}
      LC_ALL: ${LC_ALL:-C.UTF-8}
    ports:
      - "${DB_PORT:-5438}:5432"
    volumes:
      - postgresdb:/var/lib/postgresql/data
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "pg_isready -d $${POSTGRES_DB} -U $${POSTGRES_USER} -p 5432"
        ]
      interval: 1s
      timeout: 2s
      retries: 20
    extra_hosts:
      - "host.docker.internal:host-gateway"
  api:
    container_name: "${CONTAINER_NAME_API:-api}"
    build:
      context: ./api
      dockerfile: Dockerfile.dev
    ports:
      - "3000:3000"
    volumes:
      - ./api:/app/api
      - ./libs:/app/libs

      # Bind the node_modules folder inside the container to a
      # new empty folder on the host, where the container-specific
      # operating system modules will be installed
      - ./api/node_modules_docker_dev:/app/api/node_modules
      - ./libs/repository/node_modules_docker_dev:/app/libs/repository/node_modules
      - ./libs/core/node_modules_docker_dev:/app/libs/core/node_modules

      # The folder node_modules_docker_dev will now be available for
      # analysis in the container. To avoid this and the container does not
      # know anything about this folder, let's assign the folder node_modules_docker_dev
      # to another folder (.ignore), but now leave it empty
      - ./api/.ignore:/app/api/node_modules_docker_dev
      - ./libs/repository/.ignore:/app/libs/repository/node_modules_docker_dev
      - ./libs/core/.ignore:/app/libs/core/node_modules_docker_dev
    depends_on:
      postgres:
        condition: service_healthy
volumes:
  postgresdb: